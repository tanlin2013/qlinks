{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from typing import Tuple\n",
    "\n",
    "import numpy as np\n",
    "from scipy.linalg import expm\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [
    {
     "data": {
      "text/plain": "<matplotlib.colorbar.Colorbar at 0x1207e6190>"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 480x480 with 2 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sp = np.array([[0, 1], [0, 0]])\n",
    "sm = np.array([[0, 0], [1, 0]])\n",
    "plaqutte = np.kron(sp, np.kron(sp, np.kron(sm, sm)))\n",
    "plaqutte_conj = np.kron(sm, np.kron(sm, np.kron(sp, sp)))\n",
    "flipper = plaqutte + plaqutte_conj\n",
    "plt.matshow(flipper)\n",
    "plt.colorbar()"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "data": {
      "text/plain": "<matplotlib.colorbar.Colorbar at 0x1164abf90>"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 480x480 with 2 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.matshow(flipper @ flipper)\n",
    "plt.colorbar()"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "class HigherOrderTensorRG:\n",
    "    def __init__(self, init_tensor: np.ndarray, bond_dim: int):\n",
    "        self.init_tensor = init_tensor\n",
    "        self.bond_dim = bond_dim\n",
    "\n",
    "    def higher_order_svd(self, transfer_tensor: np.ndarray, axes: Tuple[int, int]) -> np.ndarray:\n",
    "        Us = []\n",
    "        Ss = []\n",
    "        for axis in axes:\n",
    "            tmp_ts = np.copy(transfer_tensor)\n",
    "            if axis > 0:\n",
    "                for roll in range(4 - axis):\n",
    "                    tmp_ts = np.moveaxis(tmp_ts, -1, 0)\n",
    "            tmp_ts = np.ndarray.reshape(tmp_ts, (tmp_ts.shape[0], tmp_ts.size // tmp_ts.shape[0]))\n",
    "            x, s, y = np.linalg.svd(tmp_ts, full_matrices=False)\n",
    "            Us.append(x)\n",
    "            Ss.append(s)\n",
    "\n",
    "        epsilon1 = np.sum(np.square(np.delete(Ss[0], np.arange(self.bond_dim))))\n",
    "        epsilon2 = np.sum(np.square(np.delete(Ss[1], np.arange(self.bond_dim))))\n",
    "        if epsilon1 < epsilon2:\n",
    "            U = Us[0][:, 0:self.bond_dim]\n",
    "        else:\n",
    "            U = Us[1][:, 0:self.bond_dim]\n",
    "        return U\n",
    "\n",
    "    def norm(self, transfer_tensor: np.ndarray) -> float:\n",
    "        norm = np.linalg.norm(\n",
    "            np.ndarray.reshape(transfer_tensor, (self.bond_dim ** 2, self.bond_dim ** 2)))\n",
    "        if np.isinf(norm) or norm <= 0:\n",
    "            raise ValueError(f\"Got unexpected norm of transfer tensor {norm}\")\n",
    "        return norm\n",
    "\n",
    "    def run(self, max_step: int):\n",
    "        norm_histo = []\n",
    "        T = self.init_tensor\n",
    "        for step in range(1, max_step + 1):\n",
    "            print(f\"In RG step {step}\")\n",
    "            # X direction\n",
    "            M = np.tensordot(T, T, axes=(3, 1))\n",
    "            M = np.swapaxes(M, 1, 3)\n",
    "            M = np.swapaxes(M, 2, 3)\n",
    "            M = np.swapaxes(M, 0, 1)\n",
    "            M = np.ndarray.reshape(M, (self.bond_dim ** 2, self.bond_dim, self.bond_dim ** 2, self.bond_dim))\n",
    "            U = self.higher_order_svd(M, axes=(0, 2))\n",
    "            T = np.tensordot(np.tensordot(M, U, axes=(0, 0)), U, axes=(1, 0))\n",
    "            T = np.swapaxes(T, 0, 2)\n",
    "            T = np.swapaxes(T, 1, 2)\n",
    "            T = np.swapaxes(T, 2, 3)\n",
    "            # Y direction\n",
    "            M = np.tensordot(T, T, axes=(2, 0))\n",
    "            M = np.swapaxes(M, 3, 4)\n",
    "            M = np.swapaxes(M, 2, 4)\n",
    "            M = np.swapaxes(M, 4, 5)\n",
    "            M = np.ndarray.reshape(M, (self.bond_dim, self.bond_dim ** 2, self.bond_dim, self.bond_dim ** 2))\n",
    "            U = self.higher_order_svd(M, axes=(1, 3))\n",
    "            T = np.tensordot(np.tensordot(M, U, axes=(1, 0)), U, axes=(2, 0))\n",
    "            T = np.swapaxes(T, 1, 2)\n",
    "            # normalized factor\n",
    "            norm = self.norm(T)\n",
    "            norm_histo.append(norm)\n",
    "            T /= norm\n",
    "        return T, norm_histo"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]\n",
      " [0. 1. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "from scipy.linalg import expm\n",
    "\n",
    "sz = np.array([[1, 0], [0, -1]], dtype=float)\n",
    "botzmann = expm(np.kron(sz, sz))\n",
    "u, s, v = np.linalg.svd(botzmann)\n",
    "print(u)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
